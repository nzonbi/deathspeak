:: okami ::

:: Initial specs


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: literals


:: booleans

	+ -
 [+] [-]
 %+ %-
 
:: true		+
:: false 	-

Example

tru: +
fal: -


:: strings

"abc
def
ghi"



:: arrays

	&-

:: array of variables:

values: &-a-b-c

:: is the same as:

values: &
	- a
	- b
	- c

numbers: &-1-2-3



:::::::::::::::::::::::::::
:: expression separator NO

	|
	
:: mark the separation of two expressions

:: Example

a! | b! | c! NO



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: comments 

	::


:: Examples:

:: this is a comment line



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: assignment 

	:

expr1 : expr2

:: assign the result of expr2 to expr1.
:: whole expression evaluates to expr1.

:: Examples:

a: 2



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: conditional operator "if" 
	
	?
	
expr1 ? expr2

:: if expr1 evals to true, evaluates expr2 .
:: whole expression evaluates to true or false, based on expr1.

:: Examples:

a=b ?	c:"one"			

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: else operator

	/

expr1 / expr2 

:: evaluates expr1. if expr1 is false, evaluates expr2.
:: whole expression if expr1 is false, evaluates to true or false, 
:: based on expr2. 
:: if expr1 is true, whole expression evaluates to true.
:: if expr1 is false, whole expression evaluates to true or false
:: based on expr2.

:: examples

a=1 ?			
	"one"
/ a=2 ?			
	"two"
/ a=3 ?			
	"three"
/
	"four or more"



:::::::::::::::::::::::::::
:: loops

:: consider
:: apply function to all states of an iteration
:: this includes both initial and final state
:: one of which is left out in normal iterations
:: of the type: 
:: apply function -> move to next iteration -> test condition to continue iterating

:: another thing very useful in iterations of arrays:
iterate from element index 3, including or not including it,
and leave the first element of iteration out.
Something to express things like that


:::: boolean loop

:: expr1 is boolean, loops expr2 while expr1 is true.

	(expr1 ?)<> expr2



:::: numeric loop

:: expr1 is a number range n, loops expr2 n times.
:: inside expr2 <#> is the current value of expr1

	(expr1)<> expr2

  (100)<>       :: 1 to 100
  (0,100)<>     :: 0 to 100
  (a,b)<>     :: a to b

:::: array loop

:: expr1 is an array, loop over each element of the array
:: inside expr2 the current key and value of the array are:
:: <#> is the key
:: <-> is the value

	expr1 <> expr2

  ( arr [] )<>   

  (arr[2,-2]) <>
  arr[2,100] <>

colors: "&-blue-red-green-yellow

(colors[])<> 
	key: <#>
	color: <->


:::: object loop

:: expr1 is an object, loop over object own properties 
:: inside expr2 the current key and value are:
:: <#> is the key
:: <-> is the value

	( expr1 @)<> expr2


:: Example




:: break and continue 

<^> exit current iteration
<^^> exit loop



:::::::::::::::::::::::::::
:: operators

:: math

.+ .- .* ./
 
:: equality

=


:: logical:

.& and
.% or
.>< not

:: binary:

.&.
|%|
|><|



:::::::::::::::::::::::::::
:: functions 

	!

:: (?)

go!!
go!4

:: creation:

! block

:: makes a function with block

:: execution:

expr1 ! expr2 

:: expr1 must be or eval to a function, then is executed and
:: if expr2 is provided, is passed as a parameter, accesable 
:: inside the function with #. 
:: last expression is returned, or at the ^ symbol.
:: If the next expression is not intended to be the function
:: argument, it should be separated with a comma.(?)

:: ^ before or after

:: Examples

f: ! a:2 b:1 a+b

f! 
	
sum: ! #a + #b

:: alternate definition
:: more readable but differs from normal assignment

!sum #a + #b


:::::::::::::::::::::::::::
:: forward operator

:: experimental

open! -> read! -> process! -> write!



     


:::::::::::::::::::::::::::
:: objects

	@

:: definition:
	
@ block

:: defines an object using block

:: inside the object blok, these rules apply:

:: - vars definitions are properties of the object
:: - public identifiers are preceded with nothing
:: - private identifiers are preceded an *
:: - private and public are separated namespaces.
::   there can be private vars with the
::   same name than public ones


:: Example:

robot: @ 
	name: "bot"
	color: "blue"
	speed: 10				
	*password: "oil"
	
  
:: alternate definition
:: more readable but differs from normal assignment
	
@robot  
 	name: "bot"
	color: "blue"
	speed: 10				
	*password: "oil"
  
  
   
				
:::::::::::::::::::::::::::
:: methods 

	@!

:: creation:

@! block

:: makes a method with block

:: execution:

expr1 @!
expr1 @! expr2

:: expr1 must be or eval to a method, then is executed and
:: if expr2 is provided, is passed as a parameter, accesable 
:: inside the function with #. 
:: last expression is returned, or at the ^ symbol.

:: inside method, these rules apply:

:: - variables referred are instance vars from the object
:: - _ preceded vars are method scoped vars
:: - * preceded vars are private vars of the object
:: - nothing preceded vars are public vars of the object
:: - ~ preceded, are public vars from the guest object
:: - *@ refer to the object (bound this)
:: - ~@ refer to guest object (js this)

:: Examples

m: @! 
	a: 2 
	*b: 1 
	~c: 3 
	_d: 4 





:::::::::::::::::::::::::::
:: getter 

	.!   NO

:: The getter operator allows to define a getter
:: method for an object property, and to
:: access it

:: Example     NO

obj: @

	a: 0
		
	.!a: a++

:: better syntax

  x:{a}
  
:: calls method a with no par




:::::::::::::::::::::::::::
:: setter 

obj.a :! 5     NO

:: The setter operator allows to define a setter
:: method for an object property, and to access
:: the setter to set the property value.

:: Example     NO

obj: @

	a: 0
		
	:!a: 
		a: #++


obj.a :! 4


:: better syntax

  {a}:2
  
:: calls method a with par 2
:: method return value is stored in *a




:::::::::::::::::::::::::::
:: chained method operator

:: experimental

	..

:: the chained method operator, allows to call 
:: multiple methods on the same object. 
:: call method on last object which had a method call
 
:: Example


obj .open! file 
    ..read! 
    ..process! 
    ..write!

:: passing the returning values as parameter to the next
:: with the forward op

obj .open! file -> ..read! -> ..process! -> ..write!



:::::::::::::::::::::::::::
:: right assignment

:: experimental

  exp => var

:: evaluates exp and set var to the result 





