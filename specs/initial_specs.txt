:: okami ::

:: Initial specs


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: literals


:: booleans

	+ -

:: true		+
:: false 	-

Example

tru: +
fal: -


:: strings

"abc
def
ghi"



:: arrays

	&-

:: array of variables:

values: &-a-b-c

:: is the same as:

values: &
	- a
	- b
	- c

numbers: &-1-2-3




:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: comments 

	::


:: Examples:

:: this is a comment line



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: assignment 

	:

expr1 : expr2

:: assign the result of expr2 to expr1.
:: whole expression evaluates to expr1.

:: Examples:

a: 2



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: conditional operator "if" 
	
	?
	
expr1 ? expr2

:: if expr1 evals to true, evaluates expr2 .
:: whole expression evaluates to true or false, based on expr1.

:: Examples:

a=b ?	c:"one"			

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: else operator

	/

expr1 / expr2 

:: evaluates expr1. if expr1 is false, evaluates expr2.
:: whole expression if expr1 is false, evaluates to true or false, 
:: based on expr2. 
:: if expr1 is true, whole expression evaluates to true.
:: if expr1 is false, whole expression evaluates to true or false
:: based on expr2.

:: examples

a=1 ?			
	"one"
/ a=2 ?			
	"two"
/ a=3 ?			
	"three"
/
	"four or more"



:::::::::::::::::::::::::::
:: loops

	expr1 <> expr2

:: if expr1 is boolean, loops expr2 while expr1 is true.
:: if expr1 is a number n, loops expr2 n times.
:: if expr1 is an array, loop over each element of the array
:: if expr1 is an object, loop over object own properties 

:: for numeric loops, #- is the index
:: for array loops, #- is the key, #* is the value
:: for objects loops, #- is the key, #* is the value

:: Example

colors: `-blue-red-green-yellow

colors <> 
	key: #-
	color: #*



:::::::::::::::::::::::::::
:: operators

:: math

.+ .- .* ./
 
:: equality

=


:: logical:

& and
% or
>< not

:: binary:

'&
'%
'><



:::::::::::::::::::::::::::
:: functions 

	!

:: creation:

! block

:: makes a function with block

:: execution:

expr1 ! expr2

:: expr1 must be or eval to a function, then is executed and
:: if expr2 is provided, is passed as a parameter, accesable 
:: inside the function with #. 
:: last expression is returned, or at the ^ symbol.

:: Examples

f: ! a:2 b:1 a+b

f! 
	
g: ! #a + #b




:::::::::::::::::::::::::::
:: objects

	@

:: definition:
	
@ block

:: defines an object using block

:: inside the object blok, these rules apply:

:: - vars definitions are properties of the object
:: - public identifiers are preceded with nothing
:: - private identifiers are preceded an *
:: - private and public are separated namespaces.
::   there can be private vars with the
::   same name than public ones


:: Example:

robot: @ 
	name: "bot"
	color: "blue"
	speed: 10				
	*password: "oil"
	
	
	
				
:::::::::::::::::::::::::::
:: methods 

	@!

:: creation:

@! block

:: makes a method with block

:: execution:

expr1 @!
expr1 @! expr2

:: expr1 must be or eval to a method, then is executed and
:: if expr2 is provided, is passed as a parameter, accesable 
:: inside the function with #. 
:: last expression is returned, or at the ^ symbol.

:: inside method, these rules apply:

:: - variables referred are instance vars from the object
:: - _ preceded vars are method scoped vars
:: - * preceded vars are public vars of the object
:: - nothing preceded vars are private vars of the object
:: - ~ preceded, are public vars from the guest object
:: - *@ refer to the object (bound this)
:: - ~@ refer to guest object (js this)

:: Examples

m: @! 
	a: 2 
	* b: 1 
	~ c: 3 
	_ d: 4 





:::::::::::::::::::::::::::
:: getter

	.!

:: The getter operator allows to define a getter
:: method for an object property, and to
:: access it

:: Example

obj: @

	a: 0
		
	a.!: a++


val: obj.!a


:::::::::::::::::::::::::::
:: setter 

obj.a :! 5

:: The setter operator allows to define a setter
:: method for an object property, and to access
:: the setter to set the property value

:: Example

obj: @

	a: 0
		
	a:! : 
		a: #++


obj.a :! 4



:::::::::::::::::::::::::::
:: chaining methods operator

	..

:: the chaining methods operator, allows to call 
:: multiple methods on an object. 
:: The sucessive methods are not required to return 
:: the original object. 
:: The chaining operator work on the original
:: object, independently of the previous method return 
:: value.
:: 
 
:: Example

obj ..met1.retrn_met ..met2 ..met3




